<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.thingtrust.power.data.ChargeRepository">
																  <!-- CodeBuilder  Generated-->
  <resultMap id="ChargeMap" type="com.thingtrust.power.domain.Charge">
  					 <id column="id" property="id" jdbcType="INTEGER" />
							<result column="name" property="name" jdbcType="VARCHAR" />
							<result column="phone" property="phone" jdbcType="VARCHAR" />
							<result column="address" property="address" jdbcType="VARCHAR" />
							<result column="charge" property="charge" jdbcType="DECIMAL" />
							<result column="pay_time" property="payTime" jdbcType="INTEGER" />
							<result column="bill_time" property="billTime" jdbcType="TIMESTAMP" />
							<result column="prepay" property="prepay" jdbcType="DECIMAL" />
							<result column="property_ddress" property="propertyDdress" jdbcType="VARCHAR" />
							<result column="status" property="status" jdbcType="INTEGER" />
							<result column="time_type" property="timeType" jdbcType="INTEGER" />
							<result column="type" property="type" jdbcType="INTEGER" />
							<result column="finsish_time" property="finsishTime" jdbcType="TIMESTAMP" />
							<result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
							<result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
			  </resultMap>
  <sql id="Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
  <sql id="Table_Name">charge</sql>
	<sql id="Base_Column_List_Without_Id">
  	  									name ,								phone ,								address ,								charge ,								pay_time ,								bill_time ,								prepay ,								property_ddress ,								status ,								time_type ,								type ,								finsish_time ,								create_time ,								update_time 			  </sql>
  <sql id="Base_Column_List">
  	  					id ,
			  			  			  			  			  			  			  			  			  			  			  			  			  			  				<include refid="Base_Column_List_Without_Id"/>
  </sql>
    <sql id="Insert_Columns">
     							<if test="record.name != null">name,</if>
							<if test="record.phone != null">phone,</if>
							<if test="record.address != null">address,</if>
							<if test="record.charge != null">charge,</if>
							<if test="record.payTime != null">pay_time,</if>
							<if test="record.billTime != null">bill_time,</if>
							<if test="record.prepay != null">prepay,</if>
							<if test="record.propertyDdress != null">property_ddress,</if>
							<if test="record.status != null">status,</if>
							<if test="record.timeType != null">time_type,</if>
							<if test="record.type != null">type,</if>
							<if test="record.finsishTime != null">finsish_time,</if>
							<if test="record.createTime != null">create_time,</if>
							<if test="record.updateTime != null">update_time,</if>
			    </sql>
    <sql id="Insert_Values">
    							<if test="record.name != null">#{record.name,jdbcType=VARCHAR},</if>
							<if test="record.phone != null">#{record.phone,jdbcType=VARCHAR},</if>
							<if test="record.address != null">#{record.address,jdbcType=VARCHAR},</if>
							<if test="record.charge != null">#{record.charge,jdbcType=DECIMAL},</if>
							<if test="record.payTime != null">#{record.payTime,jdbcType=INTEGER},</if>
							<if test="record.billTime != null">#{record.billTime,jdbcType=TIMESTAMP},</if>
							<if test="record.prepay != null">#{record.prepay,jdbcType=DECIMAL},</if>
							<if test="record.propertyDdress != null">#{record.propertyDdress,jdbcType=VARCHAR},</if>
							<if test="record.status != null">#{record.status,jdbcType=INTEGER},</if>
							<if test="record.timeType != null">#{record.timeType,jdbcType=INTEGER},</if>
							<if test="record.type != null">#{record.type,jdbcType=INTEGER},</if>
							<if test="record.finsishTime != null">#{record.finsishTime,jdbcType=TIMESTAMP},</if>
							<if test="record.createTime != null">#{record.createTime,jdbcType=TIMESTAMP},</if>
							<if test="record.updateTime != null">#{record.updateTime,jdbcType=TIMESTAMP},</if>
			    </sql>
    <sql id="Batch_Insert_Values">
								 #{record.name,jdbcType=VARCHAR},
		 					 #{record.phone,jdbcType=VARCHAR},
		 					 #{record.address,jdbcType=VARCHAR},
		 					 #{record.charge,jdbcType=DECIMAL},
		 					 #{record.payTime,jdbcType=INTEGER},
		 					 #{record.billTime,jdbcType=TIMESTAMP},
		 					 #{record.prepay,jdbcType=DECIMAL},
		 					 #{record.propertyDdress,jdbcType=VARCHAR},
		 					 #{record.status,jdbcType=INTEGER},
		 					 #{record.timeType,jdbcType=INTEGER},
		 					 #{record.type,jdbcType=INTEGER},
		 					 #{record.finsishTime,jdbcType=TIMESTAMP},
		 					 #{record.createTime,jdbcType=TIMESTAMP},
		 					 #{record.updateTime,jdbcType=TIMESTAMP},
		 	    </sql>
	<sql id="Batch_Insert_Values_On_DuplicateKey">
									#{record.id,jdbcType=INTEGER},
																																																																													<include refid="Batch_Insert_Values"/>
	</sql>
    <sql id="Update_Set_From_Bean">
	 							<if test="record.name != null">name = #{record.name,jdbcType=VARCHAR} ,</if>
							<if test="record.phone != null">phone = #{record.phone,jdbcType=VARCHAR} ,</if>
							<if test="record.address != null">address = #{record.address,jdbcType=VARCHAR} ,</if>
							<if test="record.charge != null">charge = #{record.charge,jdbcType=DECIMAL} ,</if>
							<if test="record.payTime != null">pay_time = #{record.payTime,jdbcType=INTEGER} ,</if>
							<if test="record.billTime != null">bill_time = #{record.billTime,jdbcType=TIMESTAMP} ,</if>
							<if test="record.prepay != null">prepay = #{record.prepay,jdbcType=DECIMAL} ,</if>
							<if test="record.propertyDdress != null">property_ddress = #{record.propertyDdress,jdbcType=VARCHAR} ,</if>
							<if test="record.status != null">status = #{record.status,jdbcType=INTEGER} ,</if>
							<if test="record.timeType != null">time_type = #{record.timeType,jdbcType=INTEGER} ,</if>
							<if test="record.type != null">type = #{record.type,jdbcType=INTEGER} ,</if>
							<if test="record.finsishTime != null">finsish_time = #{record.finsishTime,jdbcType=TIMESTAMP} ,</if>
							<if test="record.createTime != null">create_time = #{record.createTime,jdbcType=TIMESTAMP} ,</if>
							<if test="record.updateTime != null">update_time = #{record.updateTime,jdbcType=TIMESTAMP} ,</if>
			    </sql>
	<!-- insert -->
	<insert id="insert" parameterType="java.util.Map">
				<selectKey resultType="java.lang.Integer" keyProperty="record.id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
		        insert into <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Insert_Columns"/>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <include refid="Insert_Values"/>
        </trim>
    </insert>
    <insert id="batchInsert" parameterType="java.util.Map">
        insert into <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Base_Column_List_Without_Id"/>
        </trim>
        values
        <foreach collection="records" item="record" index="index" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                <include refid="Batch_Insert_Values"/>
            </trim>
        </foreach>
    </insert>
	<insert id="batchInsertOnDuplicateKey" parameterType="java.util.Map">
		insert into <include refid="Table_Name"/>
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<include refid="Base_Column_List"/>
		</trim>
		values
		<foreach collection="records" item="record" index="index" separator=",">
			<trim prefix="(" suffix=")" suffixOverrides=",">
				<include refid="Batch_Insert_Values_On_DuplicateKey"/>
			</trim>
		</foreach>
		ON DUPLICATE KEY UPDATE 
																name = VALUES(name)  ,												phone = VALUES(phone)  ,												address = VALUES(address)  ,												charge = VALUES(charge)  ,												pay_time = VALUES(pay_time)  ,												bill_time = VALUES(bill_time)  ,												prepay = VALUES(prepay)  ,												property_ddress = VALUES(property_ddress)  ,												status = VALUES(status)  ,												time_type = VALUES(time_type)  ,												type = VALUES(type)  ,												finsish_time = VALUES(finsish_time)  ,												create_time = VALUES(create_time)  ,												update_time = VALUES(update_time)  						</insert>
	<!-- end insert -->
    <!-- delete -->
    <delete id="deleteById" parameterType="java.util.Map">
        delete from <include refid="Table_Name"/> where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="java.util.Map">
        delete from <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <delete id="deleteIn" parameterType="java.util.Map">
        delete from <include refid="Table_Name"/> where id in
        <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
			#{record.id,jdbcType=INTEGER}
		</foreach>
    </delete>
    <!-- end delete -->
    <!-- update -->
	<update id="updateById" parameterType="java.util.Map">
        update <include refid="Table_Name"/>
        <set>
            <include refid="Update_Set_From_Bean"/>
        </set>
		where id = #{record.id,jdbcType=INTEGER}
	</update>
    <update id="updateByExample" parameterType="java.util.Map">
        update <include refid="Table_Name"/>
        <set>
            <include refid="Update_Set_From_Bean"/>
        </set>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </update>
    <update id="batchUpdate" parameterType="java.util.Map">
        <foreach collection="records" item="record" index="index" open="" close="" separator=";">
            update <include refid="Table_Name"/>
            <set>
            	<include refid="Update_Set_From_Bean"/>
            </set>
			where id=#{record.id,jdbcType=INTEGER}
		</foreach>
    </update>
	 <!-- end update -->
    <!-- select -->
    <select id="selectById" resultMap="ChargeMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from <include refid="Table_Name"/>
        where id = #{id,jdbcType=INTEGER}
    </select>
    <select id="selectByExample" resultMap="ChargeMap" parameterType="java.util.Map">
      select
      <if test="example != null and example.distinct">
        distinct
      </if>
      <include refid="Base_Column_List"/>
      from <include refid="Table_Name"/>
      <if test="example != null">
        <include refid="Example_Where_Clause"/>
      </if>
      <if test="example != null and example.orderByClause != null">
        order by ${example.orderByClause}
      </if>
    </select>
    <select id="selectOneByExample" resultMap="ChargeMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from <include refid="Table_Name"/>
		<if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        limit 1
    </select>
    <select id="selectIn" resultMap="ChargeMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from <include refid="Table_Name"/>
        where id IN
        <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
			#{record.id,jdbcType=INTEGER}
		</foreach>
    </select>
    <select id="countByExample" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(*) as total from <include refid="Table_Name"/>
       <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="countByPager" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(*) as total from <include refid="Table_Name"/>
		<if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="selectByPager" resultMap="ChargeMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>

            order by id desc

        limit #{pager.startIndex} , #{pager.pageSize}
    </select>
	 <!-- end select -->
    <!-- My Custom Interfaces -->
</mapper>
